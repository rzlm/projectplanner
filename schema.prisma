generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String?
  email     String?  @unique
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  tasks         Task[]          @relation("TaskAssignees")
  projects      Project[]       @relation("UserProjects")
  ProjectMember ProjectMember[]
  Task          Task[]

  @@map(name: "users")
}

model List {
  id          String   @id @default(cuid())
  name        String
  description String?
  tasks       Task[]
  boardId     String
  board       Board    @relation(fields: [boardId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Board {
  id String @id @default(cuid())

  name String

  description String?

  lists List[]

  projectId String
  project   Project  @relation(fields: [projectId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Project {
  id          String  @id @default(cuid())
  name        String
  description String?

  authorId String
  author   User   @relation("UserProjects", fields: [authorId], references: [id])

  boards  Board[]
  members ProjectMember[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProjectMember {
  id String @id @default(cuid())

  userId    String
  user      User    @relation(fields: [userId], references: [id])
  projectId String
  project   Project @relation(fields: [projectId], references: [id])
}

model Task {
  id          String     @id @default(cuid())
  name        String
  description String?
  dueDate     DateTime?
  priority    Int?
  status      TaskStatus @default(PENDING)
  listId      String
  list        List       @relation(fields: [listId], references: [id])
  assigneId   String?
  assignee    User?      @relation("TaskAssignees", fields: [assigneId], references: [id])

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  String
  tags      Tag[]    @relation("TaskTags")
}

model Tag {
  id    String @id @default(cuid())
  name  String @unique
  tasks Task[] @relation("TaskTags")
}

enum TaskStatus {
  PENDING
  CANCELLED
  COMPLETED
  BLOCKED
  IN_PROGRESS
}
